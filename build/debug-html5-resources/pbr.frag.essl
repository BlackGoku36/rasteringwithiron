#version 100
#extension GL_OES_standard_derivatives : require
precision mediump float;
precision highp int;

uniform highp sampler2D normalMap;
uniform highp sampler2D albedoMap;
uniform highp sampler2D metallicMap;
uniform highp sampler2D roughnessMap;
uniform highp sampler2D aoMap;
uniform highp vec3 cameraPos;
uniform highp vec3 lightDir;
uniform highp vec3 lightPos;
uniform highp vec3 lightCol;
uniform highp vec3 cameraDir;

varying highp vec2 TexCoords;
varying highp vec3 WorldPos;
varying highp vec3 Normal;

highp vec3 getNormalFromMap()
{
    highp vec3 tangentNormal = (texture2D(normalMap, TexCoords).xyz * 2.0) - vec3(1.0);
    highp vec3 Q1 = dFdx(WorldPos);
    highp vec3 Q2 = dFdy(WorldPos);
    highp vec2 st1 = dFdx(TexCoords);
    highp vec2 st2 = dFdy(TexCoords);
    highp vec3 N = normalize(Normal);
    highp vec3 T = normalize((Q1 * st2.y) - (Q2 * st1.y));
    highp vec3 B = -normalize(cross(N, T));
    highp mat3 TBN = mat3(vec3(T), vec3(B), vec3(N));
    return normalize(TBN * tangentNormal);
}

highp float DistributionGGX(highp vec3 N, highp vec3 H, highp float roughness)
{
    highp float a = roughness * roughness;
    highp float a2 = a * a;
    highp float NdotH = max(dot(N, H), 0.0);
    highp float NdotH2 = NdotH * NdotH;
    highp float nom = a2;
    highp float denom = (NdotH2 * (a2 - 1.0)) + 1.0;
    denom = (3.1415927410125732421875 * denom) * denom;
    return nom / max(denom, 0.001000000047497451305389404296875);
}

highp float GeometrySchlickGGX(highp float NdotV, highp float roughness)
{
    highp float r = roughness + 1.0;
    highp float k = (r * r) / 8.0;
    highp float nom = NdotV;
    highp float denom = (NdotV * (1.0 - k)) + k;
    return nom / denom;
}

highp float GeometrySmith(highp vec3 N, highp vec3 V, highp vec3 L, highp float roughness)
{
    highp float NdotV = max(dot(N, V), 0.0);
    highp float NdotL = max(dot(N, L), 0.0);
    highp float param = NdotV;
    highp float param_1 = roughness;
    highp float ggx2 = GeometrySchlickGGX(param, param_1);
    highp float param_2 = NdotL;
    highp float param_3 = roughness;
    highp float ggx1 = GeometrySchlickGGX(param_2, param_3);
    return ggx1 * ggx2;
}

highp vec3 fresnelSchlick(highp float cosTheta, highp vec3 F0)
{
    return F0 + ((vec3(1.0) - F0) * pow(1.0 - cosTheta, 5.0));
}

void main()
{
    highp vec3 albedo = pow(texture2D(albedoMap, TexCoords).xyz, vec3(2.2000000476837158203125));
    highp float metallic = texture2D(metallicMap, TexCoords).x;
    highp float roughness = texture2D(roughnessMap, TexCoords).x;
    highp float ao = texture2D(aoMap, TexCoords).x;
    highp vec3 N = getNormalFromMap();
    highp vec3 V = normalize(cameraPos - WorldPos);
    highp vec3 F0 = vec3(0.039999999105930328369140625);
    F0 = mix(F0, albedo, vec3(metallic));
    highp vec3 Lo = vec3(0.0);
    highp vec3 L = lightDir;
    highp vec3 H = normalize(V + L);
    highp float _distance = length(lightPos - WorldPos);
    highp float attenuation = 1.0 / (_distance * _distance);
    highp vec3 radiance = lightCol * attenuation;
    highp vec3 param = N;
    highp vec3 param_1 = H;
    highp float param_2 = roughness;
    highp float NDF = DistributionGGX(param, param_1, param_2);
    highp vec3 param_3 = N;
    highp vec3 param_4 = V;
    highp vec3 param_5 = L;
    highp float param_6 = roughness;
    highp float G = GeometrySmith(param_3, param_4, param_5, param_6);
    highp float param_7 = clamp(dot(H, V), 0.0, 1.0);
    highp vec3 param_8 = F0;
    highp vec3 F = fresnelSchlick(param_7, param_8);
    highp vec3 nominator = F * (NDF * G);
    highp float denominator = ((4.0 * max(dot(N, V), 0.0)) * max(dot(N, L), 0.0)) + 0.001000000047497451305389404296875;
    highp vec3 specular = nominator / vec3(denominator);
    highp vec3 kS = F;
    highp vec3 kD = vec3(1.0) - kS;
    kD *= (1.0 - metallic);
    highp float NdotL = max(dot(N, L), 0.0);
    Lo += (((((kD * albedo) / vec3(3.1415927410125732421875)) + specular) * radiance) * NdotL);
    highp vec3 ambient = (vec3(0.02999999932944774627685546875) * albedo) * ao;
    highp vec3 color = ambient + Lo;
    color /= (color + vec3(1.0));
    color = pow(color, vec3(0.4545454680919647216796875));
    gl_FragData[0] = vec4(color, 1.0);
}

